<?php
/**
 * This file is part of CherryHttp project.
 * You are using it at your own risk and you are fully responsible for everything that code will do.
 *
 * Copyright (c) 2016 Grzegorz Zdanowski <grzegorz@noflash.pl>
 *
 * For the full copyright and license information, please view the LICENSE file distributed with this source code.
 */

namespace noFlash\CherryHttp\Tests\Http\Response;

use noFlash\CherryHttp\Http\Response\ErrorResponse;
use noFlash\CherryHttp\Http\Response\ResponseCode;
use noFlash\CherryHttp\Http\Response\ResponseInterface;

class ErrorResponseTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ErrorResponse
     */
    private $subjectUnderTest;

    public function setUp()
    {
        $this->subjectUnderTest = new ErrorResponse();
    }

    public function testObjectImplementsResponseInterface()
    {
        $this->assertInstanceOf(ResponseInterface::class, $this->subjectUnderTest);
    }

    public function testFreshInstanceContainsInternalServerErrorCodeWithIanaReasonPhrase()
    {
        $expectedCode = ResponseCode::INTERNAL_SERVER_ERROR;
        $expectedReasonPhrase = ResponseCode::getReasonPhraseByCode($expectedCode);

        $this->assertSame($expectedCode, $this->subjectUnderTest->getStatusCode());
        $this->assertSame($expectedReasonPhrase, $this->subjectUnderTest->getReasonPhrase());
    }

    public function testFreshInstanceContainsGenericExplanation()
    {
        $this->assertSame('No further details are available.', $this->subjectUnderTest->getExplanation());
    }

    public function testExplanationCanBeSetUsingDedicatedMethod()
    {
        $this->subjectUnderTest->setExplanation('Too much derping for today!');
        $this->assertSame('Too much derping for today!', $this->subjectUnderTest->getExplanation());

        $this->subjectUnderTest->setExplanation('FooBaz day is over :(');
        $this->assertSame('FooBaz day is over :(', $this->subjectUnderTest->getExplanation());
    }

    public function errorCodesProvider()
    {
        return [
            [ResponseCode::BAD_GATEWAY],
            [ResponseCode::BAD_REQUEST],
            [ResponseCode::METHOD_NOT_ALLOWED],
            [ResponseCode::GONE],
            [ResponseCode::NOT_FOUND],
            [ResponseCode::LOOP_DETECTED],
            [ResponseCode::HTTP_VERSION_NOT_SUPPORTED],
            [487], //Future codes
            [499],
            [512],
            [598]
        ];
    }

    /**
     * @dataProvider errorCodesProvider
     */
    public function testStatusAcceptsErrorCodes($code)
    {
        $this->subjectUnderTest->setStatus($code);
        $this->assertSame($code, $this->subjectUnderTest->getStatusCode());
    }

    public function nonErrorCodesProvider()
    {
        return [
            [ResponseCode::CONTINUE_INFORMATION],
            [ResponseCode::OK],
            [ResponseCode::NOT_MODIFIED],
            [ResponseCode::PERMANENT_REDIRECT],
            [652],
            [781],
            [833],
            [911]
        ];
    }

    /**
     * @dataProvider nonErrorCodesProvider
     */
    public function testStatusRejectsNonErrorCodes($code)
    {
        $this->setExpectedException(\LogicException::class);
        $this->subjectUnderTest->setStatus($code);
    }

    public function testFreshInstanceContainsHtmlContentType()
    {
        $this->assertTrue($this->subjectUnderTest->hasHeader('content-type'));
        $this->assertStringStartsWith('text/html', $this->subjectUnderTest->getHeader('content-type')[0]);
    }

    public function testHtmlBodyIsAutogeneratedIfNotSet()
    {
        $body = $this->subjectUnderTest->getBody();
        $this->assertNotEmpty($body);
        $this->assertRegExp('/^\<html.*?\>\<\/html\>/is', $body);

        $this->subjectUnderTest->setBody('foo');
        $this->assertSame('foo', $this->subjectUnderTest->getBody());

        $this->subjectUnderTest->setBody(null);
        $body = $this->subjectUnderTest->getBody();
        $this->assertNotEmpty($body);
        $this->assertRegExp('/^\<html.*?\>\<\/html\>/is', $body);
    }

    public function testAutoGeneratedHtmlContainsExplanationSet()
    {
        $this->subjectUnderTest->setExplanation('Because We Can');
        $this->assertRegExp('/Because We Can/is', $this->subjectUnderTest->getBody());

        $this->subjectUnderTest->setExplanation('Yet another error');
        $this->assertRegExp('/Yet another error/is', $this->subjectUnderTest->getBody());
    }
}
